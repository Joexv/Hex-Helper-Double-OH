<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="blankpage_Text" xml:space="preserve">
    <value>Please Open a ROM or else snek will eat u</value>
  </data>
  <data name="bw_Text" xml:space="preserve">
    <value>BW Repel System</value>
  </data>
  <data name="debugging_Menu" xml:space="preserve">
    <value>Debugging Mode</value>
  </data>
  <data name="en_Menu" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="flashback_Text" xml:space="preserve">
    <value>Remove Flashbacks</value>
  </data>
  <data name="fr_Menu" xml:space="preserve">
    <value>Français</value>
  </data>
  <data name="fr_Name" xml:space="preserve">
    <value>Fire Red</value>
  </data>
  <data name="grass_Text" xml:space="preserve">
    <value>Fix Tall Grass</value>
  </data>
  <data name="languages_Menu" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="mew_Text" xml:space="preserve">
    <value>Forced Mew Obediance</value>
  </data>
  <data name="more_Menu" xml:space="preserve">
    <value>More</value>
  </data>
  <data name="open_Menu" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="pokedex_Text" xml:space="preserve">
    <value>Pokedex Fix</value>
  </data>
  <data name="running_Text" xml:space="preserve">
    <value>Running Indoors</value>
  </data>
  <data name="sp_Menu" xml:space="preserve">
    <value>Español</value>
  </data>
  <data name="Status_Add" xml:space="preserve">
    <value>Added!</value>
  </data>
  <data name="Status_Remove" xml:space="preserve">
    <value>Removed!</value>
  </data>
  <data name="welcome_Status" xml:space="preserve">
    <value>Welcome!</value>
  </data>
  <data name="backup_Menu" xml:space="preserve">
    <value>Open Backup Folder</value>
  </data>
  <data name="backup_Status" xml:space="preserve">
    <value>Backup Created</value>
  </data>
  <data name="backup_Status_Failed" xml:space="preserve">
    <value>Backup Failed</value>
  </data>
  <data name="write_ERROR" xml:space="preserve">
    <value>ERROR</value>
  </data>
  <data name="write_NoROM" xml:space="preserve">
    <value>ROM Missing</value>
  </data>
  <data name="amap_Text" xml:space="preserve">
    <value>Fix A-Map Face Down bug</value>
  </data>
  <data name="bw_Warning" xml:space="preserve">
    <value>This hack is for FireRed v1 only, and uses the freespace for around 0x80 bytes. If you have used this space it will overwrite it and delete your data which could result in corruption or a bad script. Click yes if you understand the risks.</value>
  </data>
  <data name="dexSeen_Text" xml:space="preserve">
    <value>Dex Seen in menu</value>
  </data>
  <data name="egg_Text" xml:space="preserve">
    <value>Level 1 Babies</value>
  </data>
  <data name="evo_Text" xml:space="preserve">
    <value>Evolve without National Dex</value>
  </data>
  <data name="freespace_Warning" xml:space="preserve">
    <value>Please enter a location of free space 0x80 bytes in length.Leave out '0x'.</value>
  </data>
  <data name="hm_Text" xml:space="preserve">
    <value>Deletable HMs</value>
  </data>
  <data name="legend_Text" xml:space="preserve">
    <value>Fix Legendary IV RNG</value>
  </data>
  <data name="notice_Warning" xml:space="preserve">
    <value>Notice</value>
  </data>
  <data name="poison_Text" xml:space="preserve">
    <value>Disable OW Poison</value>
  </data>
  <data name="runFlag_Text" xml:space="preserve">
    <value>Running Shoes without flag</value>
  </data>
  <data name="warning_Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="birch_Text" xml:space="preserve">
    <value>Remove Birch Intro</value>
  </data>
  <data name="ev_Text" xml:space="preserve">
    <value>252 EV Limit</value>
  </data>
  <data name="pomeg_Text" xml:space="preserve">
    <value>Pomeg Berry Fix</value>
  </data>
  <data name="help_Menu" xml:space="preserve">
    <value>Help</value>
  </data>
</root>